oc projects   # список всех проектов


Проверим состояниие кластера:
crc status

Логинимся как Developer
oc login -u developer -p developer https://api.crc.testing:6443

Логинимся под админом
oc login -u kubeadmin -p $(cat ~/.crc/machines/crc/kubeadmin-password) https://api.crc.testing:6443


Проверим кто мы
oc whoami
oc projects

Посмотрим ноды
oc get nodes


1.1
Создать проект
oc new-project demo
1.2
Проверили, что он создался
oc project
1.3
Создаем ConfigMap
oc create configmap nginx-conf --from-file=$(pwd)\nginx-cm\nginx.conf
oc create configmap nginx-conf --from-file=\nginx.conf

1.4
Если надо удалить
oc delete configmap index.html
1.5
Применяем конфигурацию
oc apply -f quote-app.yaml
1.6
Проверяем как поднялись pod
oc get pods -w
1.7
Переходим в консоль
crc console



oc new-app --name=hello nginx:alpine

Что именно делает эта команда
Создаёт DeploymentConfig (или Deployment, в зависимости от версии)
Берёт образ nginx:alpine из Docker Hub.
Создаёт объект, который управляет Pod’ами (реплики, рестарты и т.д.).
Имя ресурса будет hello.
Создаёт Service (ClusterIP)
По умолчанию Service экспонирует порт контейнера наружу в кластере.
Имя сервиса = hello.
Деплоит Pod с контейнером
Поднимает контейнер с nginx:alpine.
В Pod будут метки app=hello.



oc expose svc/hello
→ создаётся Route, и у тебя появляется внешний URL для доступа.


Применить yaml
oc apply -f nginx-lab.yaml

Редактировать deploy
voc edit deploy nginx-conf

Вытащить конфиг в file
oc get deployment hello -o yaml > hello-deploy.yaml


crc start
ERRO Is 'crc daemon' running? Cannot reach daemon API: Get "http://unix/api/version": dial unix /Users/mac/.crc/crc-http.sock: connect: no such file or directory

Проверить не завис ли процесс
ps aux | grep crc
установка Демона
crc daemon



