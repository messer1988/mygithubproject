from transformers import AutoModelForCausalLM, AutoTokenizer, Trainer, TrainingArguments
import datasets

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é GPT-2
model_name = "gpt2"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –∏ –º–æ–¥–µ–ª—å
tokenizer = AutoTokenizer.from_pretrained(model_name)
tokenizer.pad_token = tokenizer.eos_token  # GPT-2 –Ω–µ –∏–º–µ–µ—Ç pad_token ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º eos

model = AutoModelForCausalLM.from_pretrained(model_name)

# –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –º–∏–Ω–∏-–¥–∞—Ç–∞—Å–µ—Ç (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∑–∂–µ)
data = {
    "train": [
        {"text": "–ö–∞–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Jenkins? –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å systemctl jenkins."},
        {"text": "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ Ansible? –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ansible-playbook."},
    ]
}

# –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è + –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ labels
def tokenize_function(examples):
    tokenized = tokenizer(
        examples["text"],
        truncation=True,
        padding="max_length",
        max_length=64,
    )
    tokenized["labels"] = tokenized["input_ids"].copy()
    return tokenized

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞
dataset = datasets.Dataset.from_list(data["train"])
tokenized_dataset = dataset.map(tokenize_function, batched=True)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
training_args = TrainingArguments(
    output_dir="./results",
    num_train_epochs=1,
    per_device_train_batch_size=2,
    logging_steps=2,
    save_steps=10,
    save_total_limit=1,
)

# –°–æ–∑–¥–∞—ë–º Trainer –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_dataset,
)

trainer.train()

# üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä
model.save_pretrained("./trained_model")
tokenizer.save_pretrained("./trained_model")